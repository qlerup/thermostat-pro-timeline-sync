name: Auto-close issues after no reply (hourly + buffer)

on:
  schedule:
    - cron: '0 * * * *'  # kører hver time (UTC)
  workflow_dispatch:

jobs:
  sweep:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    env:
      ALLOWED_STARTERS: "qlerup"   # dine maintainer-brugere
      AWAIT_LABEL: "awaiting-response"
      CLOSED_LABEL: "closed-by-automation"
      GRACE_DAYS: "3"                     # antal dage uden svar
      BUFFER_MINUTES: "120"               # ekstra sikkerhedsmargin, fx 2 timer
    steps:
      - name: Close awaiting-response with no replies
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const allowed = new Set((process.env.ALLOWED_STARTERS || "")
              .split(",").map(s => s.trim().toLowerCase()).filter(Boolean));

            const graceMs =
              parseInt(process.env.GRACE_DAYS || "3", 10) * 24 * 60 * 60 * 1000;
            const bufferMs =
              parseInt(process.env.BUFFER_MINUTES || "0", 10) * 60 * 1000;

            async function ensureLabel(name, color, description) {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (e) {
                if (e.status === 404) {
                  await github.rest.issues.createLabel({ owner, repo, name, color, description });
                } else { throw e; }
              }
            }

            await ensureLabel(process.env.CLOSED_LABEL, 'ededed', 'Closed automatically by workflow');

            // Find alle åbne issues med awaiting-label
            const issues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: 'open', labels: process.env.AWAIT_LABEL, per_page: 100 }
            );

            const now = new Date();

            for (const issue of issues) {
              // Hent alle kommentarer
              const comments = await github.paginate(
                github.rest.issues.listComments,
                { owner, repo, issue_number: issue.number, per_page: 100 }
              );

              // Seneste markerings-kommentar fra GitHub Actions-bot
              const marker = [...comments].reverse().find(c =>
                (c.user?.type === 'Bot') &&
                (c.user?.login || '').includes('github-actions') &&
                /<!--\s*awaiting:start:/.test(c.body || '')
              );

              if (!marker) {
                core.info(`#${issue.number}: ingen marker fundet – skipper`);
                continue;
              }

              const m = (marker.body || '').match(/awaiting:start:([0-9T:\-:.Z]+)/);
              if (!m) { core.info(`#${issue.number}: marker uden timestamp – skipper`); continue; }

              const markerDate = new Date(m[1]);
              const elapsed = now - markerDate;

              // Respekter grace + buffer
              if (elapsed < (graceMs + bufferMs)) {
                core.info(`#${issue.number}: inden for grace+buffer – skipper`);
                continue;
              }

              // Er der svar efter markeringen (ikke bot og ikke fra ALLOWED_STARTERS)?
              const hasReply = comments.some(c => {
                const after = new Date(c.created_at) > markerDate;
                const byBot = (c.user?.type === 'Bot');
                const byStarter = allowed.has((c.user?.login || '').toLowerCase());
                return after && !byBot && !byStarter;
              });

              if (hasReply) {
                // Fjern awaiting-label når der ER blevet svaret
                try {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number: issue.number, name: process.env.AWAIT_LABEL
                  });
                } catch (e) { /* ignore if already gone */ }
                core.info(`#${issue.number}: der er kommet svar – holder åbent og fjerner label`);
                continue;
              }

              // Ingen svar → luk
              await github.rest.issues.update({ owner, repo, issue_number: issue.number, state: 'closed' });
              try {
                await github.rest.issues.removeLabel({ owner, repo, issue_number: issue.number, name: process.env.AWAIT_LABEL });
              } catch (e) { /* ignore */ }
              await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: [process.env.CLOSED_LABEL] });

              await github.rest.issues.createComment({
                owner, repo, issue_number: issue.number,
                body: `No reply after **${process.env.GRACE_DAYS} day(s)** (+${process.env.BUFFER_MINUTES} min buffer) since maintainer request. Auto-closing.\n\nComment to reopen if needed.`
              });

              core.info(`Closed #${issue.number} due to inactivity.`);
            }
